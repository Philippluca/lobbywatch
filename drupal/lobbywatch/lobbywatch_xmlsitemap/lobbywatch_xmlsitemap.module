<?php

// http://drupal.stackexchange.com/questions/63718/how-to-convert-hook-xmlsitemap-links-to-xmlsitemap-6-x-2-x-api

module_load_include('inc', 'lobbywatch_data', 'lobbywatch.interface');

function lobbywatch_xmlsitemap_xmlsitemap_index_links($limit = 10000, $rebuild = true, $cron = false) {
//   watchdog('lobbywatch_xmlsitemap', 'Lobbywatch start updateing sitemap.xml.', array());
//   dpm('_lobbywatch_xmlsitemap_xmlsitemap_index_links');
//   watchdog('lobbywatch_xmlsitemap', 'Lobbywatch start updateing sitemap.xml. ' . print_r(Constants::getAllEntities(), true), array());
  foreach (Constants::$entities_web_old as $table => $name) {
    _lobbywatch_xmlsitemap_xmlsitemap_delete_links($table, $name, $limit, $rebuild, $cron);
  }
  foreach (Constants::getAllEntities() as $table => $name) {
    _lobbywatch_xmlsitemap_xmlsitemap_index_links($table, $name, $limit, $rebuild, $cron);
  }
//   watchdog('lobbywatch_xmlsitemap', 'Lobbywatch sitemap.xml updated.', array());
}

function _lobbywatch_xmlsitemap_xmlsitemap_delete_links($table, $name, $limit, $rebuild, $cron) {
  xmlsitemap_link_delete_multiple(array(
    'type' => "lw_$table",
  ));
  drupal_set_message(t('Lobbywatch XML sitemap data %table cleaned', array('%table' => $table)));
}

function _lobbywatch_xmlsitemap_xmlsitemap_index_links($table, $name, $limit, $rebuild, $cron) {
//   dpm($table, '_lobbywatch_xmlsitemap_xmlsitemap_index_links');
//   watchdog('lobbywatch_xmlsitemap', 'Lobbywatch sitemap.xml update: %table', array('%table' => $table));
  try {
    if ($rebuild) {
      _lobbywatch_xmlsitemap_xmlsitemap_delete_links($table, $name, $limit, $rebuild, $cron);
    }
    xmlsitemap_switch_user(0);
    foreach(array('de', 'fr') as $lang) {
//       lobbywatch_set_lang($lang);
      $sql = "SELECT x.id FROM {xmlsitemap} x WHERE x.type = 'lw_$table' AND x.language='$lang'";
      //$indexed = xmlsitemap_db_fetch_col($query);
  //     $indexed = db_query_range($sql, 0, $limit, array())->fetchCol();
      $indexed = db_query($sql, array())->fetchCol();

      //there isn't a lot of stuff, it fits in memory, but fetching it is costly.
      $indexed = array_flip($indexed);
      $data = _lobbywatch_sitemap_table_flat_list($table);
      $i = 0;
      foreach ($data as $rec) {
        if (!isset($indexed[_lobbywatch_xmlsitemap_calc_xml_id($rec['id'], $lang)])) {
          # new record
          xmlsitemap_link_save(_lobbywatch_xmlsitemap_xmlsitemap_make_link($table, $name, $rec, $lang));
          $i++;
  //         watchdog('debug', '$rec[id]: ' . $rec['id'], array(), WATCHDOG_DEBUG);
        }

        unset($indexed[_lobbywatch_xmlsitemap_calc_xml_id($rec['id'], $lang)]);
        if ($i == $limit)
          break;
      }
  //     watchdog('debug', $data, array(), WATCHDOG_DEBUG);
  //     watchdog('debug', "i: $i, limit: $limit", array(), WATCHDOG_DEBUG);

      $added = $i;
      $deleted = array();
      #Done indexing new stuff;
      if ($indexed && $i < $limit) {
        $deleted = array_flip($indexed);
        // TODO does it work? 'id'=>$deleted, if it is here an array
        xmlsitemap_link_delete_multiple(array('type'=>"lw_$table", 'id'=>$deleted, 'language' => $lang));
      }
      if ($cron) {
        if ($added > 0 || count($deleted) > 0) {
          watchdog('lobbywatch_xmlsitemap', '@lang: %table indexed: %added added, %removed removed', array('%table' => $table, '%added' => $added, '%removed' => count($deleted), '@lang' => $lang,), WATCHDOG_DEBUG);
        }
      } else {
        drupal_set_message(t('Lobbywatch XML sitemap data @lang %table indexed, %added added, %removed removed', array('%table' => $table, '%added' => $added, '%removed' => count($deleted), '@lang' => $lang,)));
      }
    }
  } finally {
    xmlsitemap_restore_user();
  }
}

function lobbywatch_xmlsitemap_link_info() {
//   dpm('lobbywatch_xmlsitemap_link_info');
  return array(
      'lobbywatch' => array(
          'label' => t('Lobbywatch data'),
          'xmlsitemap' => array(
              'rebuild callback' => 'lobbywatch_xmlsitemap_xmlsitemap_index_links',
          ),
      )
  );
}

// /**
//  * Implements hook_entity_info_alter().
//  */
// function xmlsitemap_node_entity_info_alter(array &$entity_info) {
//   $entity_info['node']['label'] = t('Content');
//   $entity_info['node']['bundle label'] = t('Content type');
//   $entity_info['node']['xmlsitemap'] = array(
//       'process callback' => 'xmlsitemap_node_xmlsitemap_process_node_links',
//   );
// }

// /**
//  * Implements hook_entity_info_alter().
//  *
//  * Adds support for the menu link entity if it doesn't already exist.
//  */
// function xmlsitemap_menu_entity_info_alter(&$info) {
//   if (!isset($info['menu_link'])) {
//     $info['menu_link'] = array(
//         'label' => t('Menu link'),
//         'controller class' => 'DrupalDefaultEntityController',
//         'base table' => 'menu_links',
//         'uri callback' => 'xmlsitemap_menu_menu_link_uri',
//         'fieldable' => FALSE,
//         'static cache' => TRUE,
//         'field cache' => TRUE,
//         'entity keys' => array(
//             'id' => 'mlid',
//             'bundle' => 'menu_name',
//             'label' => 'link_title',
//             'revision' => '',
//         ),
//         'load hook' => NULL,
//         'view modes' => array(),
//         'translation' => array(),
//         'schema_fields_sql' => array(
//             'base table' => drupal_schema_fields_sql('menu_links'),
//         ),
//         'xmlsitemap' => array(
//             'process callback' => 'xmlsitemap_menu_xmlsitemap_process_menu_links',
//         ),
//         'bundle label' => t('Menu'),
//     );

//     foreach (menu_get_menus() as $type => $name) {
//       $info['menu_link']['bundles'][$type] = array(
//           'label' => $name,
//           'admin' => array(
//               'path' => 'admin/structure/menu/manage/%menu/edit',
//               'bundle argument' => 4,
//               'real path' => 'admin/structure/menu/manage/' . $type . '/edit',
//               'access arguments' => array('administer menus'),
//           ),
//       );
//     }
//   }
// }


/**
 * Helper for link object creation.
 */
function _lobbywatch_xmlsitemap_xmlsitemap_make_link($table, $name, $rec, $lang) {
  $table_id = $rec['id'];
  $xml_id = _lobbywatch_xmlsitemap_calc_xml_id($table_id, $lang);
  $url_name = _lobbywatch_anzeige_name_for_url($table, $table_id, $lang);
  $path = substr("daten/$name/$table_id/$url_name", 0, 255); // xmlsitemap.loc is limited to 255 chars

  if (isset(Constants::$page_changes_of_table[$table])) {
    $lastmod_date = max(strtotime(Constants::$page_changes_of_table[$table]), $rec['updated_date_unix']);
//     df('max(' . $rec['updated_date_unix'] . ', ' . Constants::$page_changes_of_table[$table] . ' -> ' . strtotime(Constants::$page_changes_of_table[$table])  . ') => ' . $lastmod_date, 'PAGE_DATE ' . $path);
  } else {
    $lastmod_date = $rec['updated_date_unix'];
//     df($lastmod_date, '          ' . $path);
  }

  return array(
      'loc' => $path,
      'type' => "lw_$table",
      'id' => $xml_id,
      'priority' => _lobbywatch_xmlsitemap_priority($table),
      'lastmod' => $lastmod_date,
      'changefreq' => XMLSITEMAP_FREQUENCY_MONTHLY,
      'changecount' => 0,
      'language' => $lang,
  );
}

function _lobbywatch_xmlsitemap_priority($table) {
  switch($table) {
    case 'parlamentarier' : return 0.9;
    case 'zutrittsberechtigung' : return 0.7;
    case 'organisation' : return 0.6;
    default: return XMLSITEMAP_PRIORITY_DEFAULT;
  }
}

function _lobbywatch_xmlsitemap_calc_xml_id($table_id, $lang) {
  return $table_id * 2 + ($lang === 'fr' ? 1 : 0);
}

/**
 * Implements hook_cron().
 *
 * Process old menu links not found in the {xmlsitemap} table.
 */
function lobbywatch_xmlsitemap_cron() {
//   watchdog('lobbywatch_xmlsitemap', 'Lobbywatch start updateing sitemap.xml.', array(), WATCHDOG_INFO);
  lobbywatch_xmlsitemap_xmlsitemap_index_links(xmlsitemap_var('batch_limit'), false, true);
  watchdog('lobbywatch_xmlsitemap', 'Lobbywatch sitemap.xml updated.', array(), WATCHDOG_INFO);
}

function _lobbywatch_sitemap_table_flat_list($table, $condition = '1') {
//   dpm(module_load_include('inc', 'lobbywatch_data', 'lobbywatch.interface'));
  $items = null;
  // Use the database we set up earlier
  // Ref: https://drupal.org/node/18429
  db_set_active('lobbywatch');

  try {
    $sql = "
    SELECT $table.id, $table.updated_date_unix
    FROM v_$table $table
    WHERE $condition " .
    " AND $table.freigabe_datum < NOW()";

    $result = db_query($sql, array());

//     $items = _lobbywatch_data_clean_records($result);

    $items = $result->fetchAll(PDO::FETCH_ASSOC);
  } finally {
    // Go back to the default database,
    // otherwise Drupal will not be able to access it's own data later on.
    db_set_active();

    return $items;
  }
}

// /**
//  * Batch callback; fetch and add the sitemap links for a specific entity.
//  */
// function lobbywatch_xmlsitemap_rebuild_batch_fetch($entity, &$context) {
//   if (!isset($context['sandbox']['info'])) {
//     $context['sandbox']['info'] = xmlsitemap_get_link_info($entity);
//     $context['sandbox']['progress'] = 0;
//     $context['sandbox']['last_id'] = 0;
//   }
//   $info = $context['sandbox']['info'];

//   $query = new EntityFieldQuery();
//   $query->entityCondition('entity_type', $entity);
//   $query->entityCondition('entity_id', $context['sandbox']['last_id'], '>');
//   $query->addTag('xmlsitemap_link_bundle_access');
//   $query->addTag('xmlsitemap_rebuild');
//   $query->addMetaData('entity', $entity);
//   $query->addMetaData('entity_info', $info);

//   if (!isset($context['sandbox']['max'])) {
//     $count_query = clone $query;
//     $count_query->count();
//     $context['sandbox']['max'] = $count_query->execute();
//     if (!$context['sandbox']['max']) {
//       // If there are no items to process, skip everything else.
//       return;
//     }
//   }

//   // PostgreSQL cannot have the ORDERED BY in the count query.
//   $query->entityOrderBy('entity_id');

//   $limit = 20; //variable_get('xmlsitemap_batch_limit', 100)
//   $query->range(0, $limit);

//   $result = $query->execute();
//   $ids = array_keys($result[$entity]);

//   $info['xmlsitemap']['process callback']($ids);
//   $context['sandbox']['last_id'] = end($ids);
//   $context['sandbox']['progress'] += count($ids);
//   $context['message'] = t('Now processing %entity @last_id (@progress of @count).', array('%entity' => $entity, '@last_id' => $context['sandbox']['last_id'], '@progress' => $context['sandbox']['progress'], '@count' => $context['sandbox']['max']));

//   if ($context['sandbox']['progress'] >= $context['sandbox']['max']) {
//     $context['finished'] = 1;
//   }
//   else {
//     $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
//   }
// }

// /**
//  * Batch callback; sitemap rebuild finished.
//  */
// function xmlsitemap_rebuild_batch_finished($success, $results, $operations, $elapsed) {
//   if ($success && !variable_get('xmlsitemap_rebuild_needed', FALSE)) {
//     drupal_set_message(t('The sitemap links were rebuilt.'));
//   }
//   else {
//     drupal_set_message(t('The sitemap links were not successfully rebuilt.'), 'error');
//   }
// }

